//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EasyFreight.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EasyFreightEntities : DbContext
    {
        public EasyFreightEntities()
            : base("name=EasyFreightEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Agent> Agents { get; set; }
        public virtual DbSet<AgentContact> AgentContacts { get; set; }
        public virtual DbSet<Carrier> Carriers { get; set; }
        public virtual DbSet<CarrierContact> CarrierContacts { get; set; }
        public virtual DbSet<CarrierRate> CarrierRates { get; set; }
        public virtual DbSet<CarrierRateTransit> CarrierRateTransits { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<CompanySetup> CompanySetups { get; set; }
        public virtual DbSet<CompanySetupContact> CompanySetupContacts { get; set; }
        public virtual DbSet<Consignee> Consignees { get; set; }
        public virtual DbSet<ConsigneeContact> ConsigneeContacts { get; set; }
        public virtual DbSet<ContainerType> ContainerTypes { get; set; }
        public virtual DbSet<Contractor> Contractors { get; set; }
        public virtual DbSet<ContractorContact> ContractorContacts { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<CurrencyExchage> CurrencyExchages { get; set; }
        public virtual DbSet<IncotermLib> IncotermLibs { get; set; }
        public virtual DbSet<Notifier> Notifiers { get; set; }
        public virtual DbSet<NotifierContact> NotifierContacts { get; set; }
        public virtual DbSet<PackageType> PackageTypes { get; set; }
        public virtual DbSet<Port> Ports { get; set; }
        public virtual DbSet<Shipper> Shippers { get; set; }
        public virtual DbSet<ShipperContact> ShipperContacts { get; set; }
        public virtual DbSet<StatusLib> StatusLibs { get; set; }
        public virtual DbSet<SystemSetup> SystemSetups { get; set; }
        public virtual DbSet<TruckingCostLib> TruckingCostLibs { get; set; }
        public virtual DbSet<TruckingOrderCost> TruckingOrderCosts { get; set; }
        public virtual DbSet<TruckingOrderDetail> TruckingOrderDetails { get; set; }
        public virtual DbSet<TruckingOrder> TruckingOrders { get; set; }
        public virtual DbSet<StaticText> StaticTexts { get; set; }
        public virtual DbSet<StaticTextLabel> StaticTextLabels { get; set; }
        public virtual DbSet<DepartmentEasyModel> DepartmentEasyModels { get; set; }
        public virtual DbSet<Vessel> Vessels { get; set; }
        public virtual DbSet<Area> Areas { get; set; }
        public virtual DbSet<ContractorRate> ContractorRates { get; set; }
    
        public virtual ObjectResult<GetCarrierRate_Result> GetCarrierRate(Nullable<bool> getValidOnly)
        {
            var getValidOnlyParameter = getValidOnly.HasValue ?
                new ObjectParameter("getValidOnly", getValidOnly) :
                new ObjectParameter("getValidOnly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCarrierRate_Result>("GetCarrierRate", getValidOnlyParameter);
        }
    
        public virtual ObjectResult<GetContractorRate_Result> GetContractorRate(Nullable<bool> getValidOnly)
        {
            var getValidOnlyParameter = getValidOnly.HasValue ?
                new ObjectParameter("getValidOnly", getValidOnly) :
                new ObjectParameter("getValidOnly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetContractorRate_Result>("GetContractorRate", getValidOnlyParameter);
        }
    }
}
